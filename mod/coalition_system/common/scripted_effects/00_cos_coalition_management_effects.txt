##################################################

### Coalition system - Scripted Effects | Coalition Management

# cos_create_coalition_effect	-	Creates a new coalition
# cos_destroy_coalition_effect	-	Destroys the specified coalition
# cos_join_coalition_effect		-	Given character joins the specified coalition
# cos_leave_coalition_effect	-	Removes the scoped character from whatever coalition they're in

##################################################

##################################################
# cos_create_coalition_effect - Creates a new coalition
#
# 	Parameter => LEADER, Character, The character that will lead the coalition
#	Parameter => NAME, loc_key, The localization key used for the coalitions' name
#	Parameter => COA, none|generate|scope NAME | existing coa, Either generates a coa, takes a scope:NAME to use as a coa or uses a COA like 'k_england'
#	Parameter => CAN_INHERIT, yes/no, Determines whether the coalition can be inherited upon leader death
#
#	Out => scope:coalition, Title, The title associated with the coalition
#	Out => scope:coalition_obj, Story_cycle, The story object related to the coalition
##################################################
cos_create_coalition_effect = {
	# Save our parameters as scopes, to make sure they are properly named
	$LEADER$ = { save_scope_as = cos_leader }
	save_scope_value_as = {
		name = cos_can_inherit
		value = $CAN_INHERIT$
	}
	
	# Create the title
	switch = {
		trigger = COALITION_DEFAULT_TIER
		tier_duchy = {
			create_dynamic_title = {
				tier = duchy
				name = $NAME$
			}
		}
		tier_kingdom = {
			create_dynamic_title = {
				tier = kingdom
				name = $NAME$
			}
		}
		tier_empire = {
			create_dynamic_title = {
				tier = empire
				name = $NAME$
			}
		}
	}
	
	# Change scope name
	scope:new_title = { save_scope_as = coalition }

	# Set-up some settings
	scope:coalition = {
		set_delete_on_destroy = yes
		set_no_automatic_claims = yes
		set_definitive_form = yes
		set_can_be_named_after_dynasty = no
		
		if = {
			limit = { scope:cos_can_inherit = no }
			set_destroy_on_succession = yes
		}
	}
	
	# Create storage for the coalition
	create_story = {
		type = cos_coalition_obj
		save_scope_as = coalition_obj
	}
	scope:coalition_obj = {
		set_variable = {
			name = cos_leader
			value = scope:cos_leader
		}
		set_variable = {
			name = cos_title
			value = scope:coalition
		}
		set_variable = {
			name = cos_old_title
			value = scope:cos_leader.primary_title
		}
		set_variable = {
			name = cos_member_count
			value = 0
		}
	}
	
	# Store coalition in the leader, and globally
	scope:cos_leader = {
		set_variable = {
			name = coalition
			value = scope:coalition_obj
		}
		
		# Actually get the title
		get_title = scope:coalition
		
		# Make sure it's the primary title
		if = {
			limit = { NOT = { has_primary_title = scope:coalition } }
			set_primary_title_to = scope:coalition
		}
	}
	#TODO: Fix DummyMale before 1.4 drops
	dummy_male = {
		add_to_variable_list = {
			name = cos_list
			target = scope:coalition_obj
		}
	}
	
	# Set-up Coalition COA
	switch = {
		trigger = flag:$COA$
		flag:none = { }
		flag:generate = {
			scope:coalition = {
				generate_coa = yes
			}
		}
		fallback = {
			scope:coalition = {
				if = {
					limit = { exists = scope:$COA$ }
					set_coa = scope:$COA$
				}
				else = {
					set_coa = $COA$
				}
			}
		}
	}
	
	#TODO: Set-up war ?
	#TODO: If war-setup fails, kill coalition ?
}

##################################################
# cos_destroy_coalition_effect - Destroys the specified coalition
#
#	Parameter => COALITION_OBJ, Story_cycle, The coalition object containing data related to the coalition
##################################################
cos_destroy_coalition_effect = {
	# Save our parameters as scopes, to make sure they are properly named
	$COALITION_OBJ$ = { save_scope_as = cos_obj }
	
	scope:cos_obj = {
		ordered_in_list = {
			variable = cos_lv_list
			order_by = var:cos_title_tier
			max = scope:cos_obj.var:cos_member_count
			
			var:cos_char = { cos_leave_coalition_effect = yes }
		}
	}
	
	# Destroy title
	scope:cos_obj.var:cos_leader = { destroy_title = scope:cos_obj.var:cos_title }
	
	# Restore old title
	scope:cos_obj = {
		var:cos_leader = {
			if = {
				limit = {
					exists = PREV.var:cos_old_title
					has_title = PREV.var:cos_old_title
				}
				set_primary_title_to = PREV.var:cos_old_title
			}
		}
	}
	
	# Clear variables
	scope:cos_obj.var:cos_leader = { remove_variable = coalition }
	
	#TODO: Fix DummyMale before 1.4 drops
	dummy_male = {
		remove_list_variable = {
			name = cos_list
			target = scope:cos_obj
		}
	}
	
	# Destroy story
	scope:cos_obj = { end_story = yes }
}

##################################################
# cos_join_coalition_effect - Given character joins the specified coalition
#
#	Parameter => CHARACTER, Character, Character that is to join the coalition
#	Parameter => COALITION_OBJ, Story_cycle, The coalition object containing data related to the coalition
##################################################
cos_join_coalition_effect = {
	#TODO: Add temporary opinion modifier to prevent instant rebellion
	# Save our parameters as scopes, to make sure they are properly named
	$COALITION_OBJ$ = { save_scope_as = cos_obj }
	$CHARACTER$ = { save_scope_as = cos_char }
	
	# Create story object
	create_story = {
		type = cos_lv_link
		save_scope_as = lv_link_obj
	}
	
	# Configure object
	scope:lv_link_obj = {
		# Add character
		set_variable = {
			name = cos_char
			value = scope:cos_char
		}
		# Add liege
		if = {
			limit = { exists = scope:cos_char.liege }
			set_variable = {
				name = cos_char_liege
				value = scope:cos_char.liege
			}
		}
		else = {
			set_variable = {
				name = cos_char_liege
				value = scope:cos_char
			}
		}
		# Set title-tier, so we can revert changes from top-down
		set_variable = {
			name = cos_title_tier
			value = scope:cos_char.primary_title.tier
		}
	}

	# Add to coalition linking list
	scope:cos_obj = {
		add_to_variable_list = {
			name = cos_lv_list
			target = scope:lv_link_obj
		}
		change_variable = {
			name = cos_member_count
			add = 1
		}
	}
	
	# Add character to list for easy reference
	scope:cos_obj = {
		add_to_variable_list = {
			name = cos_member_list
			target = scope:cos_char
		}
	}
	
	# Transfer to coalition
	create_title_and_vassal_change = {
		type = swear_fealty
		save_scope_as = change
		add_claim_on_loss = no
	}
	scope:cos_char = {
		change_liege = {
			liege = scope:cos_obj.var:cos_leader
			change = scope:change
		}
		resolve_title_and_vassal_change = scope:change
		
		# Store a copy of the coalition
		set_variable = {
			name = coalition
			value = scope:cos_obj
		}
	}
}
##################################################
# cos_leave_coalition_effect - Removes the scoped character from whatever coalition they're in
##################################################
cos_leave_coalition_effect = {
	#TODO: Remove temporary opinion modifier if it still exists
	# Set-up scopes	
	var:coalition = { save_scope_as = cos_obj }
	save_scope_as = cos_char
	
	# Fetch the correct lv_link object
	scope:cos_obj = {
		random_in_list = {
			variable = cos_lv_list			
			limit = {
				story_type = cos_lv_link
				var:cos_char = scope:cos_char
			}
			save_scope_as = lv_link_obj
		}
	}
	
	# Revert changes
	if = {
		limit = { scope:lv_link_obj.var:cos_char_liege = scope:cos_char }
		
		# Independence
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:cos_char = {
			becomes_independent = {
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
	else = {
		# Revert to proper liege
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:cos_char = {
			change_liege = {
				liege = scope:lv_link_obj.var:cos_char_liege
				change = scope:change
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
	
	# Remove variable
	remove_variable = coalition
	
	# Remove from lists
	scope:cos_obj = {
		remove_list_variable = {
			name = cos_member_list
			target = scope:cos_char
		}
		remove_list_variable = {
			name = cos_lv_list
			target = scope:lv_link_obj
		}
		change_variable = {
			name = cos_member_count
			subtract = 1
		}
	}
	
	# Destroy story
	scope:lv_link_obj = { end_story = yes }
}